generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
}

model SpotifyCredentials {
  id           Int      @id @default(autoincrement())
  accessToken  String   @map("access_token") @db.Text
  refreshToken String   @map("refresh_token") @db.Text
  expiresAt    DateTime @default(now()) @map("expires_at")

  @@map("spotify_credentials")
}

model SpotifyCursor {
  id        Int       @id @default(autoincrement())
  cursor    String    @db.Text
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("spotify_cursor")
}

model SpotifyArtist {
  id     String                   @id
  name   String                   @db.Text
  uri    String                   @map("uri") @db.Text
  tracks SpotifyArtistsOnTracks[]
  albums SpotifyArtistsOnAlbums[]

  @@map("spotify_artists")
}

model SpotifyAlbum {
  id                   String                   @id
  name                 String                   @db.Text
  releaseDate          DateTime                 @map("release_date")
  releaseDatePrecision String                   @map("release_date_precision") @db.Text
  totalTracks          Int                      @map("total_tracks")
  type                 String                   @db.Text
  uri                  String                   @map("uri") @db.Text
  images               SpotifyAlbumImage[]
  tracks               SpotifyTrack[]
  artists              SpotifyArtistsOnAlbums[]

  @@map("spotify_albums")
}

model SpotifyAlbumImage {
  id      String       @id @default(cuid())
  height  Int?
  width   Int?
  url     String       @unique
  album   SpotifyAlbum @relation(fields: [albumId], references: [id])
  albumId String       @map("spotify_album_id")

  @@index([albumId])
  @@map("spotify_album_images")
}

model SpotifyTrack {
  id                  String                   @id
  name                String                   @db.Text
  durationMs          Int                      @map("duration_ms")
  explicit            Boolean
  uri                 String                   @map("uri") @db.Text
  album               SpotifyAlbum             @relation(fields: [albumId], references: [id])
  albumId             String                   @map("spotify_album_id")
  artists             SpotifyArtistsOnTracks[]
  SpotifyPlayedTracks SpotifyPlayedTracks[]

  @@index([albumId])
  @@map("spotify_tracks")
}

model SpotifyArtistsOnTracks {
  artist   SpotifyArtist @relation(fields: [artistId], references: [id])
  artistId String        @map("spotify_artist_id")
  track    SpotifyTrack  @relation(fields: [trackId], references: [id])
  trackId  String        @map("spotify_track_id")
  position Int

  @@id([artistId, trackId])
  @@index([artistId])
  @@index([trackId])
  @@map("spotify_artist_tracks")
}

model SpotifyArtistsOnAlbums {
  artist   SpotifyArtist @relation(fields: [artistId], references: [id])
  artistId String        @map("spotify_artist_id")
  album    SpotifyAlbum  @relation(fields: [albumId], references: [id])
  albumId  String        @map("spotify_album_id")
  position Int

  @@id([artistId, albumId])
  @@index([artistId])
  @@index([albumId])
  @@map("spotify_artist_albums")
}

model SpotifyPlayedTracks {
  id         Int          @id @default(autoincrement())
  playedAt   DateTime     @map("played_at")
  track      SpotifyTrack @relation(fields: [trackId], references: [id])
  trackId    String       @map("spotify_track_id")
  popularity Int

  @@index([playedAt])
  @@index([trackId])
  @@map("spotify_played_tracks")
}
